// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id               String             @id @default(cuid())
  name             String?
  email            String             @unique
  username         String             @unique @default(cuid())
  emailVerified    DateTime?
  image            String?
  accounts         Account[]
  sessions         Session[]
  UserPreferences  UserPreferences?
  Style            Style[]
  WaterProfile     WaterProfile[]
  EquipmentProfile EquipmentProfile[]
  MashProfile      MashProfile[]
  Recipe           Recipe[]
  recipeCounter    Int?               @default(0)
  batchCounter     Int?               @default(0)
}

model UnitPreferences {
  id              String                    @id @default(cuid())
  color           UserColorPreference       @default(L)
  flow            FlowUnit                  @default(gpm)
  concentration   ConcentrationUnit         @default(ppm)
  time            TimeUnit                  @default(min)
  volume          UserVolumePreference      @default(gal)
  hopMass         UserMassPreference        @default(Oz)
  fermentableMass UserMassPreference        @default(Lb)
  gravity         UserGravityPreference     @default(SG)
  temperature     UserTemperaturePreference @default(F)
  UserPreferences UserPreferences[]
}

model UserPreferences {
  userId String @id @unique
  user   User   @relation(fields: [userId], references: [id])

  unitPreferenceId     String?
  UnitPreferences      UnitPreferences?          @relation(fields: [unitPreferenceId], references: [id])
  color                UserColorPreference       @default(L)
  time                 TimeUnit                  @default(min)
  volume               UserVolumePreference      @default(gal)
  hopMass              UserMassPreference        @default(Oz)
  fermentableMass      UserMassPreference        @default(LbOz)
  gravity              UserGravityPreference     @default(SG)
  temperature          UserTemperaturePreference @default(F)
  defaultEquipment     EquipmentProfile?         @relation(fields: [equipmentProfileId], references: [id])
  defaultMashProfile   MashProfile?              @relation(fields: [mashProfileId], references: [id])
  defaultSourceWater   WaterProfile?             @relation("SourceWater", fields: [sourceWaterProfileId], references: [id])
  defaultTargetWater   WaterProfile?             @relation("TargetWater", fields: [targetWaterProfileId], references: [id])
  equipmentProfileId   Int?
  sourceWaterProfileId Int?
  targetWaterProfileId Int?
  mashProfileId        Int?
  //  MashProfile          MashProfile?              @relation(fields: [mashProfileId], references: [id])
}

enum MassUnit {
  Oz
  Lb
  g
  Kg
}

enum FlowUnit {
  gpm
  lpm
}

enum ConcentrationUnit {
  ppm
  ppb
}

enum TimeUnit {
  min
  hr
  day
}

enum UserVolumePreference {
  L
  gal
  bbl
}

enum UserMassPreference {
  g
  LbOz
  Lb
  Oz
  Kg
}

enum UserTemperaturePreference {
  F
  C
}

enum UserGravityPreference {
  SG
  P
}

enum UserColorPreference {
  L
  SRM
}

enum HopUsage {
  aroma
  bittering
  dual
}

model Hop {
  //id                Int       @id @default(autoincrement())
  id                String    @id @unique @default(cuid())
  name              String
  slug              String    @unique
  description       String?
  characteristics   String?
  country           String?
  usage             HopUsage?
  alpha             Float?
  alphaLow          Float?
  alphaHigh         Float?
  beta              Float?
  betaLow           Float?
  betaHigh          Float?
  caryophyllene     Float?
  caryophylleneLow  Float?
  caryophylleneHigh Float?
  cohumulone        Float?
  cohumuloneLow     Float?
  cohumuloneHigh    Float?
  farnesene         Float?
  farneseneLow      Float?
  farneseneHigh     Float?
  humulene          Float?
  humuleneLow       Float?
  humuleneHigh      Float?
  myrcene           Float?
  myrceneLow        Float?
  myrceneHigh       Float?
  totalOil          Float?
  totalOilLow       Float?
  totalOilHigh      Float?
  geraniol          Float?
  geraniolLow       Float?
  geraniolHigh      Float?
  other             Float?
  otherLow          Float?
  otherHigh         Float?
  linalool          Float?
  linaloolLow       Float?
  linaloolHigh      Float?

  bPinene           Float?
  bPineneLow        Float?
  bPineneHigh       Float?
  purpose           String?
  flavor            String?
  notes             String?
  substitutesString String[]
  styles            String[]
  //  HopIngredient     HopIngredient[]
  HopSensoryPanel   HopSensoryPanel[]
  HopIngredient     HopIngredient[]
}

model HopSensoryPanel {
  id            Int     @id @default(autoincrement())
  hopId         String?
  slug          String  @unique
  hop           Hop     @relation(fields: [slug], references: [slug])
  sweetAromatic Float
  berry         Float
  stoneFruit    Float
  pomme         Float
  melon         Float
  tropical      Float
  citrus        Float
  floral        Float
  herbal        Float
  vegetal       Float
  grassy        Float
  earthy        Float
  woody         Float
  spicy         Float
  year          Int?
  author        String?
  notes         String?
}

model Fermentable {
  //id                    Int                     @id @default(autoincrement())
  id                    String                  @id @unique @default(cuid())
  name                  String
  slug                  String                  @unique
  description           String?
  notes                 String?
  manufacturer          String?
  country               String?
  power                 Int?
  maxUsage              Float?
  color                 Float?
  potential             Float?
  stability             String?
  //  FermentableIngredient FermentableIngredient[]
  FermentableIngredient FermentableIngredient[]
}

enum YeastForm {
  Liquid
  Dry
}

enum YeastFlocculation {
  VeryHigh
  High
  Medium
  Low
  VeryLow
}

enum YeastType {
  Ale
  Lager
  Wheat
  Wine
}

model Yeast {
  //id           Int                @id @default(autoincrement())
  id              String             @id @unique @default(cuid())
  name            String
  slug            String             @unique
  usage           String?
  description     String?
  notes           String?
  manufacturer    String?
  type            YeastType?
  form            YeastForm?
  tempLow         Float?
  tempHigh        Float?
  flocculation    YeastFlocculation?
  tolerance       Float?
  attenuation     Float?
  attenuationLow  Float?
  attenuationHigh Float?
  //  YeastIngredient YeastIngredient[]
}

enum StyleCategory {
  beer
  mead
  cider
}

model Style {
  id     Int     @id @default(autoincrement())
  userId String?
  owner  User?   @relation(fields: [userId], references: [id])

  name          String
  slug          String        @unique
  recipes       Recipe[]
  category      StyleCategory
  subcategoryId Int
  identifier    String        @unique
  overall       String?
  aroma         String?
  appearance    String?
  flavor        String?
  mouthfeel     String?
  comments      String?
  history       String?
  ingredients   String?
  comparison    String?
  examples      String?
  ibuLow        Float?
  ibuHigh       Float?
  ibuFlex       Boolean       @default(false)
  ogLow         Float?
  ogHigh        Float?
  ogFlex        Boolean       @default(false)
  fgLow         Float?
  fgHigh        Float?
  fgFlex        Boolean       @default(false)
  srmLow        Float?
  srmHigh       Float?
  srmFlex       Boolean       @default(false)
  abvLow        Float?
  abvHigh       Float?
  abvFlex       Boolean       @default(false)
}

model WaterProfile {
  id             Int               @id @default(autoincrement())
  userId         String?
  owner          User?             @relation(fields: [userId], references: [id])
  name           String
  slug           String            @unique
  calcium        Int
  magnesium      Int
  sodium         Int
  chloride       Int
  sulfate        Int
  bicarbonate    Int
  description    String?
  //  Recipe         Recipe[]
  DefaultSources UserPreferences[] @relation("SourceWater")
  TargetSources  UserPreferences[] @relation("TargetWater")
  forkedFrom     Int?
  origin         WaterProfile?     @relation("origin", fields: [forkedFrom], references: [id])
  forks          WaterProfile[]    @relation("origin")
}

model EquipmentProfile {
  id              Int                @id @default(autoincrement())
  userId          String?
  owner           User?              @relation(fields: [userId], references: [id])
  forkedFrom      Int?
  origin          EquipmentProfile?  @relation("origin", fields: [forkedFrom], references: [id])
  forks           EquipmentProfile[] @relation("origin")
  name            String
  slug            String             @unique
  description     String?
  batchVolume     Float?
  boilVolume      Float?
  preboilVolume   Float?
  boilTime        Float?
  brewEfficiency  Float?
  mashEfficiency  Float?
  boilOffRate     Float?
  trubLoss        Float?             @default(0)
  mashLoss        Float?             @default(0)
  fermenterLoss   Float?             @default(0)
  grainAbsorption Float?             @default(0.5)
  waterGrainRatio Float?             @default(1.5)
  //  Recipe          Recipe[]
  UserPreferences UserPreferences[]
  Recipe          Recipe[]
}

model MashProfile {
  id          Int           @id @default(autoincrement())
  name        String
  slug        String        @unique
  description String?
  steps       MashStep[]
  userId      String?
  owner       User?         @relation(fields: [userId], references: [id])
  forkedFrom  Int?
  origin      MashProfile?  @relation("origin", fields: [forkedFrom], references: [id])
  forks       MashProfile[] @relation("origin")

  //  Recipe          Recipe[]
  UserPreferences UserPreferences[]
}

enum MashStepType {
  temperature
  infusion
  decoction
}

model MashStep {
  id          Int          @id @default(autoincrement())
  type        MashStepType @default(temperature)
  name        String?
  temperature Float
  time        Float
  rampTime    Float        @default(0)

  MashProfile   MashProfile? @relation(fields: [mashProfileId], references: [id])
  mashProfileId Int?
}

model Recipe {
  id                 String            @unique @default(cuid())
  createdAt          DateTime          @default(now())
  name               String
  slug               String
  description        String?
  ownerUsername      String
  ownerEmail         String
  owner              User              @relation(fields: [ownerUsername], references: [username])
  forkedFrom         String?
  origin             Recipe?           @relation("origin", fields: [forkedFrom], references: [id])
  forks              Recipe[]          @relation("origin")
  styleIdentifier    String?
  styleId            Int?
  style              Style?            @relation(fields: [styleId], references: [id])
  equipmentProfileId Int?
  equipmentProfile   EquipmentProfile? @relation(fields: [equipmentProfileId], references: [id])
  batchVolume        Float?            @default(22)
  boilVolume         Float?            @default(25)
  preboilVolume      Float?            @default(25)
  boilTime           Float?            @default(60)
  brewEfficiency     Float?            @default(0.6)
  mashEfficiency     Float?            @default(0.7)
  boilOffRate        Float?            @default(2)
  trubLoss           Float?            @default(0)
  mashLoss           Float?            @default(0)
  fermenterLoss      Float?            @default(0)
  grainAbsorption    Float?            @default(0.5)

  hops         HopIngredient[]
  fermentables FermentableIngredient[]

  @@id([ownerUsername, slug])
}

enum HopIngredientUsage {
  Boil
  Whirlpool
  DryHop
  Mash
}

enum HopIngredientType {
  Pellet
  Cryo
  Whole
  Extract
}

model HopIngredient {
  id           Int                @default(autoincrement())
  recipeId     String
  recipe       Recipe             @relation(fields: [recipeId], references: [id])
  amount       Float
  usage        HopIngredientUsage
  amountType   MassUnit
  temperature  Float?
  type         HopIngredientType  @default(Pellet)
  duration     Float
  durationType TimeUnit
  hopId        String
  hop          Hop                @relation(fields: [hopId], references: [id])
  alpha        Float?

  @@id([recipeId, id])
}

enum FermentableIngredientUsage {
  Mash
  Extract
  Steep
  Late
}

model FermentableIngredient {
  id            Int                        @default(autoincrement())
  recipeId      String
  recipe        Recipe                     @relation(fields: [recipeId], references: [id])
  usage         FermentableIngredientUsage @default(Mash)
  amount        Float
  amountType    MassUnit
  //duration      Float
  //durationType  TimeUnit
  fermentableId String
  fermentable   Fermentable                @relation(fields: [fermentableId], references: [id])
  color         Float?
  potential     Float?

  @@id([recipeId, id])
}
